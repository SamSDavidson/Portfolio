{"ast":null,"code":"import _objectSpread from\"/Users/samueldavidson/Documents/GitHub/Portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{v1 as uuid}from'uuid';import API from'../_utils/API';import{REQ_POSTS_PENDING,REQ_POSTS_SUCCESS,REQ_POSTS_ERROR,ADD_POST_ERROR,ADD_POST_PENDING,ADD_POST_SUCCESS,REQ_POST_PENDING,REQ_POST_SUCCESS,REQ_POST_ERROR,UPDATE_POST_ERROR,UPDATE_POST_PENDING,UPDATE_POST_SUCCESS}from'../actionTypes';var CACHE_TIME=1000*60*5;export var fetchPosts=function fetchPosts(){return{types:[REQ_POSTS_PENDING,REQ_POSTS_SUCCESS,REQ_POSTS_ERROR],callAPI:function callAPI(){return API.get('/posts');},// check app state and call API if applicable\nshouldCallAPI:function shouldCallAPI(state){var _state$posts=state.posts,loadedAt=_state$posts.loadedAt,isLoading=_state$posts.isLoading;// check if posts are loading\nif(isLoading)return false;var isCached=Date.now()-loadedAt<CACHE_TIME;// if empty or timeout on request make the API req\nreturn!loadedAt||!isCached;}};};export var createPost=function createPost(post){var id=uuid();return{types:[ADD_POST_ERROR,ADD_POST_PENDING,ADD_POST_SUCCESS],callAPI:function callAPI(){return API.post('/posts',_objectSpread({id:id},post));},payload:{id:id}};};export var fetchPost=function fetchPost(id){return{types:[REQ_POST_ERROR,REQ_POST_PENDING,REQ_POST_SUCCESS],callAPI:function callAPI(){return API.get(\"/posts/\".concat(id));},shouldCallAPI:function shouldCallAPI(state){var post=state.posts.byId[id]||{};var loadedAt=post.loadedAt,isLoading=post.isLoading;if(!post||isLoading)return false;var isCached=Date.now()-loadedAt<CACHE_TIME;return!loadedAt||!isCached;},payload:{id:id}};};export var updatePost=function updatePost(post){return{types:[UPDATE_POST_ERROR,UPDATE_POST_PENDING,UPDATE_POST_SUCCESS],callAPI:function callAPI(){return API.put(\"/posts/\".concat(post.id),post);},payload:{id:post.id}};};","map":{"version":3,"sources":["/Users/samueldavidson/Documents/GitHub/Portfolio/client/src/store/posts/actions.js"],"names":["v1","uuid","API","REQ_POSTS_PENDING","REQ_POSTS_SUCCESS","REQ_POSTS_ERROR","ADD_POST_ERROR","ADD_POST_PENDING","ADD_POST_SUCCESS","REQ_POST_PENDING","REQ_POST_SUCCESS","REQ_POST_ERROR","UPDATE_POST_ERROR","UPDATE_POST_PENDING","UPDATE_POST_SUCCESS","CACHE_TIME","fetchPosts","types","callAPI","get","shouldCallAPI","state","posts","loadedAt","isLoading","isCached","Date","now","createPost","post","id","payload","fetchPost","byId","updatePost","put"],"mappings":"6KAAA,OAASA,EAAE,GAAIC,CAAAA,IAAf,KAA2B,MAA3B,CACA,MAAOC,CAAAA,GAAP,KAAgB,eAAhB,CACA,OACEC,iBADF,CAEEC,iBAFF,CAGEC,eAHF,CAIEC,cAJF,CAKEC,gBALF,CAMEC,gBANF,CAOEC,gBAPF,CAQEC,gBARF,CASEC,cATF,CAUEC,iBAVF,CAWEC,mBAXF,CAYEC,mBAZF,KAaO,gBAbP,CAeA,GAAMC,CAAAA,UAAU,CAAG,KAAO,EAAP,CAAY,CAA/B,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAO,CAC/BC,KAAK,CAAE,CAACd,iBAAD,CAAoBC,iBAApB,CAAuCC,eAAvC,CADwB,CAE/Ba,OAAO,CAAE,yBAAMhB,CAAAA,GAAG,CAACiB,GAAJ,CAAQ,QAAR,CAAN,EAFsB,CAG/B;AACAC,aAAa,CAAE,uBAAAC,KAAK,CAAI,kBACUA,KAAK,CAACC,KADhB,CACdC,QADc,cACdA,QADc,CACJC,SADI,cACJA,SADI,CAEtB;AACA,GAAIA,SAAJ,CAAe,MAAO,MAAP,CACf,GAAMC,CAAAA,QAAQ,CAAGC,IAAI,CAACC,GAAL,GAAaJ,QAAb,CAAwBR,UAAzC,CACA;AACA,MAAO,CAACQ,QAAD,EAAa,CAACE,QAArB,CACD,CAX8B,CAAP,EAAnB,CAcP,MAAO,IAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,IAAI,CAAI,CAChC,GAAMC,CAAAA,EAAE,CAAG7B,IAAI,EAAf,CACA,MAAO,CACLgB,KAAK,CAAE,CAACX,cAAD,CAAiBC,gBAAjB,CAAmCC,gBAAnC,CADF,CAELU,OAAO,CAAE,yBAAMhB,CAAAA,GAAG,CAAC2B,IAAJ,CAAS,QAAT,gBAAqBC,EAAE,CAAFA,EAArB,EAA4BD,IAA5B,EAAN,EAFJ,CAGLE,OAAO,CAAE,CAAED,EAAE,CAAFA,EAAF,CAHJ,CAAP,CAKD,CAPM,CASP,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAF,EAAE,QAAK,CAC9Bb,KAAK,CAAE,CAACN,cAAD,CAAiBF,gBAAjB,CAAmCC,gBAAnC,CADuB,CAE9BQ,OAAO,CAAE,yBAAMhB,CAAAA,GAAG,CAACiB,GAAJ,kBAAkBW,EAAlB,EAAN,EAFqB,CAI9BV,aAAa,CAAE,uBAAAC,KAAK,CAAI,CACtB,GAAMQ,CAAAA,IAAI,CAAGR,KAAK,CAACC,KAAN,CAAYW,IAAZ,CAAiBH,EAAjB,GAAwB,EAArC,CADsB,GAEdP,CAAAA,QAFc,CAEUM,IAFV,CAEdN,QAFc,CAEJC,SAFI,CAEUK,IAFV,CAEJL,SAFI,CAGtB,GAAI,CAACK,IAAD,EAASL,SAAb,CAAwB,MAAO,MAAP,CACxB,GAAMC,CAAAA,QAAQ,CAAGC,IAAI,CAACC,GAAL,GAAaJ,QAAb,CAAwBR,UAAzC,CACA,MAAO,CAACQ,QAAD,EAAa,CAACE,QAArB,CAED,CAX6B,CAY9BM,OAAO,CAAE,CAAED,EAAE,CAAFA,EAAF,CAZqB,CAAL,EAApB,CAeP,MAAO,IAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAL,IAAI,QAAK,CACjCZ,KAAK,CAAE,CAACL,iBAAD,CAAoBC,mBAApB,CAAyCC,mBAAzC,CAD0B,CAEjCI,OAAO,CAAE,yBAAMhB,CAAAA,GAAG,CAACiC,GAAJ,kBAAkBN,IAAI,CAACC,EAAvB,EAA6BD,IAA7B,CAAN,EAFwB,CAGjCE,OAAO,CAAE,CAAED,EAAE,CAAED,IAAI,CAACC,EAAX,CAHwB,CAAL,EAAvB","sourcesContent":["import { v1 as uuid } from 'uuid';\nimport API from '../_utils/API';\nimport {\n  REQ_POSTS_PENDING,\n  REQ_POSTS_SUCCESS,\n  REQ_POSTS_ERROR,\n  ADD_POST_ERROR,\n  ADD_POST_PENDING,\n  ADD_POST_SUCCESS,\n  REQ_POST_PENDING,\n  REQ_POST_SUCCESS,\n  REQ_POST_ERROR,\n  UPDATE_POST_ERROR,\n  UPDATE_POST_PENDING,\n  UPDATE_POST_SUCCESS\n} from '../actionTypes';\n\nconst CACHE_TIME = 1000 * 60 * 5;\n\nexport const fetchPosts = () => ({\n  types: [REQ_POSTS_PENDING, REQ_POSTS_SUCCESS, REQ_POSTS_ERROR],\n  callAPI: () => API.get('/posts'),\n  // check app state and call API if applicable\n  shouldCallAPI: state => {\n    const { loadedAt, isLoading } = state.posts;\n    // check if posts are loading\n    if (isLoading) return false;\n    const isCached = Date.now() - loadedAt < CACHE_TIME;\n    // if empty or timeout on request make the API req\n    return !loadedAt || !isCached;\n  }\n});\n\nexport const createPost = post => {\n  const id = uuid();\n  return {\n    types: [ADD_POST_ERROR, ADD_POST_PENDING, ADD_POST_SUCCESS],\n    callAPI: () => API.post('/posts', { id, ...post }),\n    payload: { id }\n  };\n};\n\nexport const fetchPost = id => ({\n  types: [REQ_POST_ERROR, REQ_POST_PENDING, REQ_POST_SUCCESS],\n  callAPI: () => API.get(`/posts/${id}`),\n\n  shouldCallAPI: state => {\n    const post = state.posts.byId[id] || {};\n    const { loadedAt, isLoading } = post;\n    if (!post || isLoading) return false;\n    const isCached = Date.now() - loadedAt < CACHE_TIME;\n    return !loadedAt || !isCached;\n    \n  },\n  payload: { id }\n});\n\nexport const updatePost = post => ({\n  types: [UPDATE_POST_ERROR, UPDATE_POST_PENDING, UPDATE_POST_SUCCESS],\n  callAPI: () => API.put(`/posts/${post.id}`, post),\n  payload: { id: post.id }\n});\n"]},"metadata":{},"sourceType":"module"}