{"ast":null,"code":"import createReducer from '../helpers/createReducers';\nimport { REQ_POSTS_PENDING, REQ_POSTS_SUCCESS, REQ_POSTS_ERROR, ADD_POST_ERROR, ADD_POST_PENDING, ADD_POST_SUCCESS, REQ_POST_PENDING, REQ_POST_SUCCESS, REQ_POST_ERROR, UPDATE_POST_ERROR, UPDATE_POST_PENDING, UPDATE_POST_SUCCESS } from '../actionTypes';\nconst initialState = {\n  // hold id = key\n  byId: {},\n  // [] of ids\n  allIds: [],\n  // needed for cache state\n  loadedAt: 0,\n  // tracking if the state is loading\n  isLoading: false,\n  // any errors loading all the data\n  error: null\n};\n\nfunction postsPending(state, action) {\n  return { ...state,\n    isLoading: true,\n    error: null\n  };\n}\n\nfunction postsSuccess(state, action) {\n  return { ...state,\n    isLoading: false,\n    loadedAt: Date.now(),\n    error: null,\n    byId: { ...state.byId,\n      ...action.data.reduce((posts, post) => ({ // current opject\n        ...posts,\n        // add id as key and an object for loading\n        [post.id]: {\n          data: post,\n          isLoading: false,\n          loadedAt: Date.now(),\n          error: null\n        }\n      }), {})\n    },\n    allIds: [...new Set([...state.allIds, ...action.data.map(post => post.id)])]\n  };\n}\n\nfunction postsError(state, action) {\n  return { ...state,\n    isLoading: false,\n    error: action.err\n  };\n}\n\nfunction postPending(state, action) {\n  return { ...state,\n    byId: { ...state.byId,\n      [action.payload.id]: { ...state.byId[action.payload.id],\n        isLoading: true,\n        error: null\n      }\n    }\n  };\n}\n\nfunction postSuccess(state, action) {\n  return { ...state,\n    byId: { ...state.byId,\n      [action.payload.id]: {\n        isLoading: false,\n        error: null,\n        loadedAt: Date.now(),\n        data: action.data\n      }\n    },\n    allIds: [...new Set([...state.allIds, ...action.payload.id])]\n  };\n}\n\nfunction postError(state, action) {\n  return { ...state,\n    byId: { ...state.byId,\n      [action.payload.id]: { ...state.byId[action.payload.id],\n        isLoading: false,\n        error: action.err\n      }\n    }\n  };\n}\n\nexport default createReducer(initialState, {\n  [REQ_POSTS_PENDING]: postsPending,\n  [REQ_POSTS_SUCCESS]: postsSuccess,\n  [REQ_POSTS_ERROR]: postsError,\n  [ADD_POST_ERROR]: postError,\n  [ADD_POST_PENDING]: postPending,\n  [ADD_POST_SUCCESS]: postSuccess,\n  [REQ_POST_ERROR]: postError,\n  [REQ_POST_PENDING]: postPending,\n  [REQ_POST_SUCCESS]: postSuccess,\n  [UPDATE_POST_PENDING]: postPending,\n  [UPDATE_POST_SUCCESS]: postSuccess,\n  [UPDATE_POST_ERROR]: postError\n});","map":{"version":3,"sources":["/Users/samueldavidson/Documents/GitHub/Portfolio/client/src/store/posts/reducer.js"],"names":["createReducer","REQ_POSTS_PENDING","REQ_POSTS_SUCCESS","REQ_POSTS_ERROR","ADD_POST_ERROR","ADD_POST_PENDING","ADD_POST_SUCCESS","REQ_POST_PENDING","REQ_POST_SUCCESS","REQ_POST_ERROR","UPDATE_POST_ERROR","UPDATE_POST_PENDING","UPDATE_POST_SUCCESS","initialState","byId","allIds","loadedAt","isLoading","error","postsPending","state","action","postsSuccess","Date","now","data","reduce","posts","post","id","Set","map","postsError","err","postPending","payload","postSuccess","postError"],"mappings":"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","sourcesContent":["import createReducer from '../helpers/createReducers';\n\nimport {\n  REQ_POSTS_PENDING,\n  REQ_POSTS_SUCCESS,\n  REQ_POSTS_ERROR,\n  \n  ADD_POST_ERROR,\n  ADD_POST_PENDING,\n  ADD_POST_SUCCESS,\n\n  REQ_POST_PENDING,\n  REQ_POST_SUCCESS,\n  REQ_POST_ERROR,\n\n  UPDATE_POST_ERROR,\n  UPDATE_POST_PENDING,\n  UPDATE_POST_SUCCESS\n} from '../actionTypes';\n\nconst initialState = {\n  // hold id = key\n  byId: {},\n  // [] of ids\n  allIds: [],\n\n  // needed for cache state\n  loadedAt: 0,\n  // tracking if the state is loading\n  isLoading: false,\n  // any errors loading all the data\n  error: null\n};\n\nfunction postsPending(state, action) {\n  return { ...state, isLoading: true, error: null };\n}\n\nfunction postsSuccess(state, action) {\n  return {\n    ...state,\n    isLoading: false,\n    loadedAt: Date.now(),\n    error: null,\n    byId: {\n      ...state.byId,\n      ...action.data.reduce(\n        (posts, post) => ({\n          // current opject\n          ...posts,\n          // add id as key and an object for loading\n          [post.id]: {\n            data: post,\n            isLoading: false,\n            loadedAt: Date.now(),\n            error: null\n          }\n        }),\n        {}\n      )\n    },\n    allIds: [...new Set([...state.allIds, ...action.data.map(post => post.id)])]\n  };\n}\n\nfunction postsError(state, action) {\n  return {\n    ...state,\n    isLoading: false,\n    error: action.err\n  };\n}\n\nfunction postPending(state, action) {\n  return {\n    ...state,\n    byId: {\n      ...state.byId,\n      [action.payload.id]: {\n        ...state.byId[action.payload.id],\n        isLoading: true,\n        error: null\n      }\n    }\n  };\n}\n\nfunction postSuccess(state, action) {\n  return {\n    ...state,\n    byId: {\n      ...state.byId,\n      [action.payload.id]: {\n        isLoading: false,\n        error: null,\n        loadedAt: Date.now(),\n        data: action.data\n      }\n    },\n    allIds: [...new Set([...state.allIds, ...action.payload.id])]\n  };\n}\n\nfunction postError(state, action) {\n  return {\n    ...state,\n    byId: {\n      ...state.byId,\n      [action.payload.id]: {\n        ...state.byId[action.payload.id],\n        isLoading: false,\n        error: action.err\n      }\n    }\n  };\n}\n\nexport default createReducer(initialState, {\n  [REQ_POSTS_PENDING]: postsPending,\n  [REQ_POSTS_SUCCESS]: postsSuccess,\n  [REQ_POSTS_ERROR]: postsError,\n\n  [ADD_POST_ERROR]: postError,\n  [ADD_POST_PENDING]: postPending,\n  [ADD_POST_SUCCESS]: postSuccess,\n\n  [REQ_POST_ERROR]: postError,\n  [REQ_POST_PENDING]: postPending,\n  [REQ_POST_SUCCESS]: postSuccess,\n\n  [UPDATE_POST_PENDING]: postPending,\n  [UPDATE_POST_SUCCESS]: postSuccess,\n  [UPDATE_POST_ERROR]: postError\n});\n"]},"metadata":{},"sourceType":"module"}