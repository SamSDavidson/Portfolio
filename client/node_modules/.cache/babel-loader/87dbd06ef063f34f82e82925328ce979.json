{"ast":null,"code":"export default function callAPIMiddleware({\n  dispatch,\n  getState\n}) {\n  return next => async action => {\n    const {\n      types,\n      callAPI,\n      shouldCallAPI = () => true,\n      ...props\n    } = action;\n\n    if (!types) {\n      next(action);\n      return;\n    }\n\n    if (!Array.isArray(types) || types.length !== 3 || !types.every(type => typeof type === 'string')) {\n      throw new Error('Expected an array of three string types.');\n    }\n\n    if (typeof callAPI !== 'function') {\n      throw new Error('Expected callAPI to be a function.');\n    }\n\n    if (!shouldCallAPI(getState())) {\n      return;\n    }\n\n    const [requestType, successType, failureType] = types;\n    dispatch({ ...props,\n      type: requestType\n    });\n\n    try {\n      const resp = await callAPI();\n      dispatch({ ...props,\n        type: successType,\n        data: resp.data\n      });\n    } catch (err) {\n      dispatch({ ...props,\n        type: failureType,\n        err\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/Users/samueldavidson/Documents/GitHub/Portfolio/client/src/store/_utils/callAPIMiddleware.js"],"names":["callAPIMiddleware","dispatch","getState","next","action","types","callAPI","shouldCallAPI","props","Array","isArray","length","every","type","Error","requestType","successType","failureType","resp","data","err"],"mappings":"AAAA,eAAe,SAASA,iBAAT,CAA2B;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAA3B,EAAmD;AAChE,SAAOC,IAAI,IAAI,MAAMC,MAAN,IAAgB;AAC7B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA,aAAa,GAAG,MAAM,IAAxC;AAA8C,SAAGC;AAAjD,QAA2DJ,MAAjE;;AACA,QAAI,CAACC,KAAL,EAAY;AACVF,MAAAA,IAAI,CAACC,MAAD,CAAJ;AACA;AACD;;AAED,QACE,CAACK,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAD,IACAA,KAAK,CAACM,MAAN,KAAiB,CADjB,IAEA,CAACN,KAAK,CAACO,KAAN,CAAYC,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAApC,CAHH,EAIE;AACA,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,QAAI,OAAOR,OAAP,KAAmB,UAAvB,EAAmC;AACjC,YAAM,IAAIQ,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAI,CAACP,aAAa,CAACL,QAAQ,EAAT,CAAlB,EAAgC;AAC9B;AACD;;AACD,UAAM,CAACa,WAAD,EAAcC,WAAd,EAA2BC,WAA3B,IAA0CZ,KAAhD;AACAJ,IAAAA,QAAQ,CAAC,EACP,GAAGO,KADI;AAEPK,MAAAA,IAAI,EAAEE;AAFC,KAAD,CAAR;;AAIA,QAAI;AACF,YAAMG,IAAI,GAAG,MAAMZ,OAAO,EAA1B;AACAL,MAAAA,QAAQ,CAAC,EACP,GAAGO,KADI;AAEPK,QAAAA,IAAI,EAAEG,WAFC;AAGPG,QAAAA,IAAI,EAAED,IAAI,CAACC;AAHJ,OAAD,CAAR;AAKD,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZnB,MAAAA,QAAQ,CAAC,EACP,GAAGO,KADI;AAEPK,QAAAA,IAAI,EAAEI,WAFC;AAGPG,QAAAA;AAHO,OAAD,CAAR;AAKD;AACF,GAxCD;AAyCD","sourcesContent":["export default function callAPIMiddleware({ dispatch, getState }) {\n  return next => async action => {\n    const { types, callAPI, shouldCallAPI = () => true, ...props } = action;\n    if (!types) {\n      next(action);\n      return;\n    }\n\n    if (\n      !Array.isArray(types) ||\n      types.length !== 3 ||\n      !types.every(type => typeof type === 'string')\n    ) {\n      throw new Error('Expected an array of three string types.');\n    }\n\n    if (typeof callAPI !== 'function') {\n      throw new Error('Expected callAPI to be a function.');\n    }\n    if (!shouldCallAPI(getState())) {\n      return;\n    }\n    const [requestType, successType, failureType] = types;\n    dispatch({\n      ...props,\n      type: requestType\n    });\n    try {\n      const resp = await callAPI();\n      dispatch({\n        ...props,\n        type: successType,\n        data: resp.data\n      });\n    } catch (err) {\n      dispatch({\n        ...props,\n        type: failureType,\n        err\n      });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}