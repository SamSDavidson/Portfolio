{"ast":null,"code":"import { v1 as uuid } from 'uuid';\nimport API from '../_utils/API';\nimport { REQ_POSTS_PENDING, REQ_POSTS_SUCCESS, REQ_POSTS_ERROR, ADD_POST_ERROR, ADD_POST_PENDING, ADD_POST_SUCCESS, REQ_POST_PENDING, REQ_POST_SUCCESS, REQ_POST_ERROR, UPDATE_POST_ERROR, UPDATE_POST_PENDING, UPDATE_POST_SUCCESS } from '../actionTypes';\nconst CACHE_TIME = 1000 * 60 * 5;\nexport const fetchPosts = () => ({\n  types: [REQ_POSTS_PENDING, REQ_POSTS_SUCCESS, REQ_POSTS_ERROR],\n  callAPI: () => API.get('/posts'),\n  // check app state and call API if applicable\n  shouldCallAPI: state => {\n    const {\n      loadedAt,\n      isLoading\n    } = state.posts; // check if posts are loading\n\n    if (isLoading) return false;\n    const isCached = Date.now() - loadedAt < CACHE_TIME; // if empty or timeout on request make the API req\n\n    return !loadedAt || !isCached;\n  }\n});\nexport const createPost = post => {\n  const id = uuid();\n  return {\n    types: [ADD_POST_ERROR, ADD_POST_PENDING, ADD_POST_SUCCESS],\n    callAPI: () => API.post('/posts', {\n      id,\n      ...post\n    }),\n    payload: {\n      id\n    }\n  };\n};\nexport const fetchPost = id => ({\n  types: [REQ_POST_ERROR, REQ_POST_PENDING, REQ_POST_SUCCESS],\n  callAPI: () => API.get(`/posts/${id}`),\n  shouldCallAPI: state => {\n    const post = state.posts.byId[id] || {};\n    const {\n      loadedAt,\n      isLoading\n    } = post;\n    if (!post || isLoading) return false;\n    const isCached = Date.now() - loadedAt < CACHE_TIME;\n    return !loadedAt || !isCached;\n  },\n  payload: {\n    id\n  }\n});\nexport const updatePost = post => ({\n  types: [UPDATE_POST_ERROR, UPDATE_POST_PENDING, UPDATE_POST_SUCCESS],\n  callAPI: () => API.put(`/posts/${post.id}`, post),\n  payload: {\n    id: post.id\n  }\n});","map":{"version":3,"sources":["/Users/samueldavidson/Documents/GitHub/Portfolio/client/src/store/posts/actions.js"],"names":["v1","uuid","API","REQ_POSTS_PENDING","REQ_POSTS_SUCCESS","REQ_POSTS_ERROR","ADD_POST_ERROR","ADD_POST_PENDING","ADD_POST_SUCCESS","REQ_POST_PENDING","REQ_POST_SUCCESS","REQ_POST_ERROR","UPDATE_POST_ERROR","UPDATE_POST_PENDING","UPDATE_POST_SUCCESS","CACHE_TIME","fetchPosts","types","callAPI","get","shouldCallAPI","state","loadedAt","isLoading","posts","isCached","Date","now","createPost","post","id","payload","fetchPost","byId","updatePost","put"],"mappings":"AAAA,SAASA,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,eAHF,EAIEC,cAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,gBAPF,EAQEC,gBARF,EASEC,cATF,EAUEC,iBAVF,EAWEC,mBAXF,EAYEC,mBAZF,QAaO,gBAbP;AAeA,MAAMC,UAAU,GAAG,OAAO,EAAP,GAAY,CAA/B;AAEA,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC/BC,EAAAA,KAAK,EAAE,CAACd,iBAAD,EAAoBC,iBAApB,EAAuCC,eAAvC,CADwB;AAE/Ba,EAAAA,OAAO,EAAE,MAAMhB,GAAG,CAACiB,GAAJ,CAAQ,QAAR,CAFgB;AAG/B;AACAC,EAAAA,aAAa,EAAEC,KAAK,IAAI;AACtB,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BF,KAAK,CAACG,KAAtC,CADsB,CAEtB;;AACA,QAAID,SAAJ,EAAe,OAAO,KAAP;AACf,UAAME,QAAQ,GAAGC,IAAI,CAACC,GAAL,KAAaL,QAAb,GAAwBP,UAAzC,CAJsB,CAKtB;;AACA,WAAO,CAACO,QAAD,IAAa,CAACG,QAArB;AACD;AAX8B,CAAP,CAAnB;AAcP,OAAO,MAAMG,UAAU,GAAGC,IAAI,IAAI;AAChC,QAAMC,EAAE,GAAG7B,IAAI,EAAf;AACA,SAAO;AACLgB,IAAAA,KAAK,EAAE,CAACX,cAAD,EAAiBC,gBAAjB,EAAmCC,gBAAnC,CADF;AAELU,IAAAA,OAAO,EAAE,MAAMhB,GAAG,CAAC2B,IAAJ,CAAS,QAAT,EAAmB;AAAEC,MAAAA,EAAF;AAAM,SAAGD;AAAT,KAAnB,CAFV;AAGLE,IAAAA,OAAO,EAAE;AAAED,MAAAA;AAAF;AAHJ,GAAP;AAKD,CAPM;AASP,OAAO,MAAME,SAAS,GAAGF,EAAE,KAAK;AAC9Bb,EAAAA,KAAK,EAAE,CAACN,cAAD,EAAiBF,gBAAjB,EAAmCC,gBAAnC,CADuB;AAE9BQ,EAAAA,OAAO,EAAE,MAAMhB,GAAG,CAACiB,GAAJ,CAAS,UAASW,EAAG,EAArB,CAFe;AAI9BV,EAAAA,aAAa,EAAEC,KAAK,IAAI;AACtB,UAAMQ,IAAI,GAAGR,KAAK,CAACG,KAAN,CAAYS,IAAZ,CAAiBH,EAAjB,KAAwB,EAArC;AACA,UAAM;AAAER,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0BM,IAAhC;AACA,QAAI,CAACA,IAAD,IAASN,SAAb,EAAwB,OAAO,KAAP;AACxB,UAAME,QAAQ,GAAGC,IAAI,CAACC,GAAL,KAAaL,QAAb,GAAwBP,UAAzC;AACA,WAAO,CAACO,QAAD,IAAa,CAACG,QAArB;AAED,GAX6B;AAY9BM,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAZqB,CAAL,CAApB;AAeP,OAAO,MAAMI,UAAU,GAAGL,IAAI,KAAK;AACjCZ,EAAAA,KAAK,EAAE,CAACL,iBAAD,EAAoBC,mBAApB,EAAyCC,mBAAzC,CAD0B;AAEjCI,EAAAA,OAAO,EAAE,MAAMhB,GAAG,CAACiC,GAAJ,CAAS,UAASN,IAAI,CAACC,EAAG,EAA1B,EAA6BD,IAA7B,CAFkB;AAGjCE,EAAAA,OAAO,EAAE;AAAED,IAAAA,EAAE,EAAED,IAAI,CAACC;AAAX;AAHwB,CAAL,CAAvB","sourcesContent":["import { v1 as uuid } from 'uuid';\nimport API from '../_utils/API';\nimport {\n  REQ_POSTS_PENDING,\n  REQ_POSTS_SUCCESS,\n  REQ_POSTS_ERROR,\n  ADD_POST_ERROR,\n  ADD_POST_PENDING,\n  ADD_POST_SUCCESS,\n  REQ_POST_PENDING,\n  REQ_POST_SUCCESS,\n  REQ_POST_ERROR,\n  UPDATE_POST_ERROR,\n  UPDATE_POST_PENDING,\n  UPDATE_POST_SUCCESS\n} from '../actionTypes';\n\nconst CACHE_TIME = 1000 * 60 * 5;\n\nexport const fetchPosts = () => ({\n  types: [REQ_POSTS_PENDING, REQ_POSTS_SUCCESS, REQ_POSTS_ERROR],\n  callAPI: () => API.get('/posts'),\n  // check app state and call API if applicable\n  shouldCallAPI: state => {\n    const { loadedAt, isLoading } = state.posts;\n    // check if posts are loading\n    if (isLoading) return false;\n    const isCached = Date.now() - loadedAt < CACHE_TIME;\n    // if empty or timeout on request make the API req\n    return !loadedAt || !isCached;\n  }\n});\n\nexport const createPost = post => {\n  const id = uuid();\n  return {\n    types: [ADD_POST_ERROR, ADD_POST_PENDING, ADD_POST_SUCCESS],\n    callAPI: () => API.post('/posts', { id, ...post }),\n    payload: { id }\n  };\n};\n\nexport const fetchPost = id => ({\n  types: [REQ_POST_ERROR, REQ_POST_PENDING, REQ_POST_SUCCESS],\n  callAPI: () => API.get(`/posts/${id}`),\n\n  shouldCallAPI: state => {\n    const post = state.posts.byId[id] || {};\n    const { loadedAt, isLoading } = post;\n    if (!post || isLoading) return false;\n    const isCached = Date.now() - loadedAt < CACHE_TIME;\n    return !loadedAt || !isCached;\n    \n  },\n  payload: { id }\n});\n\nexport const updatePost = post => ({\n  types: [UPDATE_POST_ERROR, UPDATE_POST_PENDING, UPDATE_POST_SUCCESS],\n  callAPI: () => API.put(`/posts/${post.id}`, post),\n  payload: { id: post.id }\n});\n"]},"metadata":{},"sourceType":"module"}