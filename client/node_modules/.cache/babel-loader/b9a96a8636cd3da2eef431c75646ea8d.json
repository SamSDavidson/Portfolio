{"ast":null,"code":"import _regeneratorRuntime from\"/Users/samueldavidson/Documents/GitHub/Portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/samueldavidson/Documents/GitHub/Portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/samueldavidson/Documents/GitHub/Portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/samueldavidson/Documents/GitHub/Portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _asyncToGenerator from\"/Users/samueldavidson/Documents/GitHub/Portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export default function callAPIMiddleware(_ref){var dispatch=_ref.dispatch,getState=_ref.getState;return function(next){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(action){var types,callAPI,_action$shouldCallAPI,shouldCallAPI,props,_types,requestType,successType,failureType,resp;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:types=action.types,callAPI=action.callAPI,_action$shouldCallAPI=action.shouldCallAPI,shouldCallAPI=_action$shouldCallAPI===void 0?function(){return true;}:_action$shouldCallAPI,props=_objectWithoutProperties(action,[\"types\",\"callAPI\",\"shouldCallAPI\"]);if(types){_context.next=4;break;}next(action);return _context.abrupt(\"return\");case 4:if(!(!Array.isArray(types)||types.length!==3||!types.every(function(type){return typeof type==='string';}))){_context.next=6;break;}throw new Error('Expected an array of three string types.');case 6:if(!(typeof callAPI!=='function')){_context.next=8;break;}throw new Error('Expected callAPI to be a function.');case 8:if(shouldCallAPI(getState())){_context.next=10;break;}return _context.abrupt(\"return\");case 10:_types=_slicedToArray(types,3),requestType=_types[0],successType=_types[1],failureType=_types[2];dispatch(_objectSpread(_objectSpread({},props),{},{type:requestType}));_context.prev=12;_context.next=15;return callAPI();case 15:resp=_context.sent;dispatch(_objectSpread(_objectSpread({},props),{},{type:successType,data:resp.data}));_context.next=22;break;case 19:_context.prev=19;_context.t0=_context[\"catch\"](12);dispatch(_objectSpread(_objectSpread({},props),{},{type:failureType,err:_context.t0}));case 22:case\"end\":return _context.stop();}}},_callee,null,[[12,19]]);}));return function(_x){return _ref2.apply(this,arguments);};}();};}","map":{"version":3,"sources":["/Users/samueldavidson/Documents/GitHub/Portfolio/client/src/store/_utils/callAPIMiddleware.js"],"names":["callAPIMiddleware","dispatch","getState","next","action","types","callAPI","shouldCallAPI","props","Array","isArray","length","every","type","Error","requestType","successType","failureType","resp","data","err"],"mappings":"s3BAAA,cAAe,SAASA,CAAAA,iBAAT,MAAmD,IAAtBC,CAAAA,QAAsB,MAAtBA,QAAsB,CAAZC,QAAY,MAAZA,QAAY,CAChE,MAAO,UAAAC,IAAI,kGAAI,iBAAMC,MAAN,8NACLC,KADK,CACoDD,MADpD,CACLC,KADK,CACEC,OADF,CACoDF,MADpD,CACEE,OADF,uBACoDF,MADpD,CACWG,aADX,CACWA,aADX,gCAC2B,iBAAM,KAAN,EAD3B,uBAC0CC,KAD1C,0BACoDJ,MADpD,yCAERC,KAFQ,yBAGXF,IAAI,CAACC,MAAD,CAAJ,CAHW,6CAQX,CAACK,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAD,EACAA,KAAK,CAACM,MAAN,GAAiB,CADjB,EAEA,CAACN,KAAK,CAACO,KAAN,CAAY,SAAAC,IAAI,QAAI,OAAOA,CAAAA,IAAP,GAAgB,QAApB,EAAhB,CAVU,+BAYL,IAAIC,CAAAA,KAAJ,CAAU,0CAAV,CAZK,aAeT,MAAOR,CAAAA,OAAP,GAAmB,UAfV,+BAgBL,IAAIQ,CAAAA,KAAJ,CAAU,oCAAV,CAhBK,WAkBRP,aAAa,CAACL,QAAQ,EAAT,CAlBL,yFAqBmCG,KArBnC,IAqBNU,WArBM,WAqBOC,WArBP,WAqBoBC,WArBpB,WAsBbhB,QAAQ,gCACHO,KADG,MAENK,IAAI,CAAEE,WAFA,GAAR,CAtBa,wCA2BQT,CAAAA,OAAO,EA3Bf,SA2BLY,IA3BK,eA4BXjB,QAAQ,gCACHO,KADG,MAENK,IAAI,CAAEG,WAFA,CAGNG,IAAI,CAAED,IAAI,CAACC,IAHL,GAAR,CA5BW,kFAkCXlB,QAAQ,gCACHO,KADG,MAENK,IAAI,CAAEI,WAFA,CAGNG,GAAG,YAHG,GAAR,CAlCW,sEAAJ,iEAAX,CAyCD","sourcesContent":["export default function callAPIMiddleware({ dispatch, getState }) {\n  return next => async action => {\n    const { types, callAPI, shouldCallAPI = () => true, ...props } = action;\n    if (!types) {\n      next(action);\n      return;\n    }\n\n    if (\n      !Array.isArray(types) ||\n      types.length !== 3 ||\n      !types.every(type => typeof type === 'string')\n    ) {\n      throw new Error('Expected an array of three string types.');\n    }\n\n    if (typeof callAPI !== 'function') {\n      throw new Error('Expected callAPI to be a function.');\n    }\n    if (!shouldCallAPI(getState())) {\n      return;\n    }\n    const [requestType, successType, failureType] = types;\n    dispatch({\n      ...props,\n      type: requestType\n    });\n    try {\n      const resp = await callAPI();\n      dispatch({\n        ...props,\n        type: successType,\n        data: resp.data\n      });\n    } catch (err) {\n      dispatch({\n        ...props,\n        type: failureType,\n        err\n      });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}